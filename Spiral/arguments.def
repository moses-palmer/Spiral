#ifndef ARGUMENT_HELPERS
#define ARGUMENT_HELPERS

#include <strings.h>

/**
 * Parses a colour in HTML notation.
 *
 * @param v
 *     The colour value to parse. This may be a named colour from the table of
 *     16 standard colours.
 * @return 0 if v is not a colour definition and non-zero otherwise
 */
static int
color_parse(const char *v, GLfloat value[3])
{
    static const char *color_names[][2] = {
        {"white",   "#FFFFFF"},
        {"silver",  "#C0C0C0"},
        {"gray",    "#808080"},
        {"black",   "#000000"},
        {"red",     "#FF0000"},
        {"maroon",  "#800000"},
        {"yellow",  "#FFFF00"},
        {"olive",   "#808000"},
        {"lime",    "#00FF00"},
        {"green",   "#008000"},
        {"aqua",    "#00FFFF"},
        {"teal",    "#008080"},
        {"blue",    "#0000FF"},
        {"navy",    "#000080"},
        {"fuchsia", "#FF00FF"},
        {"purple",  "#800080"}};
    unsigned char red, green, blue;

    /* Handle named colours */
    if (*v != '#') {
        int i;
        for (i = 0; i < sizeof(color_names) / sizeof(color_names[0]); i++) {
            if (strcasecmp(v, color_names[i][0]) == 0) {
                return color_parse(color_names[i][1], value);
            }
        }

        return 0;
    }

    if (sscanf(v, "#%2hhx%2hhx%2hhx", &red, &green, &blue) == 3) {
        value[0] = (GLfloat)red / 255.0;
        value[1] = (GLfloat)green / 255.0;
        value[2] = (GLfloat)blue / 255.0;
        return 1;
    }

    return 0;
}

#endif

ARGUMENT_SECTION(
    "General arguments.")

ARGUMENT(struct { int width; int height; }, window_size, "-w",
    "<WIDTH> <HEIGHT>\n"
    "Sets the size of the window.\n"
    "\n"
    "If this is not specified, the application will run in full screen mode.\n",
    2,
    ARGUMENT_IS_OPTIONAL,

    target->width = 0;
    target->height = 0;
    ,

    target->width = atoi(value_strings[0]);
    target->height = atoi(value_strings[1]);
    is_valid = target->width > 1 && target->height > 1;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for window-size (%s %s): dimensions "
            "must be integers larger than 1\n",
            value_strings[0], value_strings[1]);
    }
    ,
)

ARGUMENT_SECTION(
    "Spiral arguments.")

ARGUMENT(unsigned int, spiral_alterations, "-a",
    "<ALTERATIONS>\n"
    "Sets the number of changes of direction for the spiral.\n"
    "\n"
    "This must be a value between 1 and 30.\n"
    "\n"
    "Default: 10",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 10;
    ,

    *target = atoi(value_strings[0]);
    is_valid = *target >= 1 && *target <= 30;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for ALTERATIONS (%s): the value must be "
            "a number between 1 and 30\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(unsigned int, spiral_curves, "-c",
    "<CURVES>\n"
    "Sets the number of curves for the spiral.\n"
    "\n"
    "This must be a value between 1 and 30.\n"
    "\n"
    "Default: 10",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 10;
    ,

    *target = atoi(value_strings[0]);
    is_valid = *target >= 1 && *target <= 30;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for CURVES (%s): the value must be a "
            "number between 1 and 30\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(double, spiral_line_width, "-l",
    "<LINE_WIDTH>\n"
    "Sets the width of the spiral line.\n"
    "\n"
    "Setting this to 0.5 will make the spiral half filled and half "
    "transparent, and a smaller value will make the transparent part bigger.\n"
    "\n"
    "This must be a value between 0.1 and 0.99.\n"
    "\n"
    "Default: 0.2",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 0.2;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0 && *target >= 0.1 && *target <= 0.99;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for LINE_WIDTH (%s): the value must be "
            "a number between 0.1 and 0.99\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(double, spiral_rotation_speed, "-r",
    "<SPEED>\n"
    "Sets the rotation speed of the spiral, expressed in cycles per second.\n"
    "\n"
    "This must be a value between 0.05 and 0.75.\n"
    "\n"
    "Default: 0.35",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 0.35;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0 && *target >= 0.05 && *target <= 0.75;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for SPEED (%s): the value must be "
            "a number between 0.05 and 0.75\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(double, spiral_twist, "-t",
    "<TWIST>\n"
    "Sets the twist of the spiral.\n"
    "\n"
    "This must be a value between -30.0 and 30.0.\n"
    "\n"
    "Default: 5.0",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 5.0;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0 && *target >= -30.0 && *target <= 30.0;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for TWIST (%s): the value must be "
            "a number between -30.0 and 30.0\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(struct { GLfloat d[3]; }, spiral_color, "-s",
    "<SPIRAL_COLOUR>\n"
    "Sets the colour of the spiral, specified as an HTML colour value.\n"
    "\n"
    "Both hexadecimal values (#FFFFFF) and named values (white) are "
    "recognised.\n"
    "\n"
    "Default: white",
    1,
    ARGUMENT_IS_OPTIONAL,

    target->d[0] = 1.0;
    target->d[1] = 1.0;
    target->d[2] = 1.0;
    ,

    is_valid = color_parse(value_strings[0], target->d);
    if (!is_valid) {
        fprintf(stderr, "Invalid value for SPIRAL_COLOUR (%s)\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT_SECTION("Background options")

ARGUMENT(struct { GLfloat d[3]; }, background_color, "-b",
    "<BACKGROUND_COLOUR>\n"
    "Sets the colour of the background, specified as an HTML colour value.\n"
    "\n"
    "Both hexadecimal values (#FFFFFF) and named values (white) are "
    "recognised.\n"
    "\n"
    "Default: black",
    1,
    ARGUMENT_IS_OPTIONAL,

    target->d[0] = 0.0;
    target->d[1] = 0.0;
    target->d[2] = 0.0;
    ,

    is_valid = color_parse(value_strings[0], target->d);
    if (!is_valid) {
        fprintf(stderr, "Invalid value for BACKGROUND_COLOUR (%s)\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(struct { int width; int height; }, background_animation_size, "-a",
    "<WIDTH> <HEIGHT>\n"
    "Sets the size of the animated background matrix.\n"
    "\n"
    "This is the number of nodes in each direction to use, and each value must "
    "be greater than 2 and less than 50.\n"
    "\n"
    "Default: 30 30",
    2,
    ARGUMENT_IS_OPTIONAL,

    target->width = 30;
    target->height = 30;
    ,

    target->width = atoi(value_strings[0]);
    target->height = atoi(value_strings[1]);
    is_valid = target->width >= 1 && target->height >= 1
        && target->width < 50 && target->height < 50;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for background-animation-size (%s %s): "
            "dimensions must be integers larger than 1 and less than 50\n",
            value_strings[0], value_strings[1]);
    }
    ,
)

ARGUMENT(double, background_animation_speed, ARGUMENT_NO_SHORT_OPTION,
    "<ANIMATIONSPEED>\n"
    "Sets the speed of the background animation.\n"
    "\n"
    "This must be a value between 0.1 and 4.0.\n"
    "\n"
    "Default: 1.5",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 1.5;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0 && *target >= 0.1 && *target <= 4.0;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for ANIMATIONSPEED (%s): the value must "
            "be a number between 0.1 and 4.0\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(double, background_animation_turbulence, ARGUMENT_NO_SHORT_OPTION,
    "<TURBULENCE>\n"
    "Sets the turbulence of the background animation.\n"
    "\n"
    "The turbulence denotes how much the animation moves. Values above 0.3 may "
    "cause rough edges in the background."
    "\n"
    "This must be a value between 0.05 and 2.0.\n"
    "\n"
    "Default: 0.25",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 0.25;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0 && *target >= 0.05 && *target <= 2.0;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for TURBULENCE (%s): the value must be "
            "a number between 0.05 and 2.0\n",
            value_strings[0]);
    }
    ,
)
